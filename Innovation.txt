/*Pour réaliser un système qui désactive l’écran de votre téléviseur tout en maintenant le son activé lorsque quelqu’un s’approche à 2 mètres ou moins, on peut utiliser un capteur de présence (par exemple un capteur PIR ou un capteur à ultrasons) et un microcontrôleur (comme un Arduino ou Raspberry Pi). Voici un protocole, la logique associée, et un exemple de code pour un prototype :

Matériel nécessaire
Capteur de distance à ultrasons (par ex. HC-SR04) ou capteur PIR (capteur infrarouge passif).
Microcontrôleur : Arduino ou Raspberry Pi.
Un contrôleur infrarouge pour envoyer des commandes à la TV (comme un module IR émetteur pour Arduino).
Câblage et alimentation.
Une télécommande de votre TV pour capturer la commande IR "Éteindre l'écran".
Logique du protocole
Détection de présence ou distance :

Le capteur surveille en continu la zone devant la TV.
Si une présence est détectée à une distance inférieure ou égale à 2 m, une commande est envoyée pour désactiver l’écran.
Conservation de l’état de la TV :

La TV reste activée (seul l’écran est désactivé, le son continue).
Si la personne s’éloigne (distance > 2 m), l’écran est réactivé.
Contrôle IR :

Le microcontrôleur envoie une commande IR préalablement enregistrée pour désactiver/réactiver l’écran.
Exemple avec Arduino et HC-SR04
Schéma de câblage :
Capteur HC-SR04 :
VCC -> 5V Arduino
GND -> GND Arduino
TRIG -> Pin numérique 9
ECHO -> Pin numérique 10
Module IR :
VCC -> 5V Arduino
GND -> GND Arduino
DATA -> Pin numérique 3
Code Arduino :
*/
#include <IRremote.h>

// Définition des broches
const int trigPin = 9;
const int echoPin = 10;
const int irPin = 3;

// Seuil de distance (en cm)
const int distanceThreshold = 200; // 200 cm = 2 m

// Variables de temps
unsigned long lastToggleTime = 0;
const unsigned long debounceDelay = 5000; // 5 secondes pour éviter les commutations fréquentes

// Initialisation du module IR
IRsend irsend;

void setup() {
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  Serial.begin(9600);
}

void loop() {
  long distance = getDistance();

  // Vérifie la distance et bascule l'écran
  if (distance <= distanceThreshold) {
    toggleScreen(false); // Désactiver l'écran
  } else {
    toggleScreen(true); // Réactiver l'écran
  }

  delay(1000); // Pause de 1 seconde pour réduire la charge du processeur
}

// Fonction pour mesurer la distance
long getDistance() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH);
  long distance = (duration * 0.034) / 2; // Conversion en cm
  return distance;
}

// Fonction pour envoyer la commande IR
void toggleScreen(bool screenOn) {
  static bool lastState = true; // L'état précédent de l'écran

  if (screenOn != lastState && (millis() - lastToggleTime > debounceDelay)) {
    lastState = screenOn;
    lastToggleTime = millis();

    if (screenOn) {
      Serial.println("Réactiver l'écran");
      // Remplacez 0xF7C03F par le code IR pour réactiver l'écran
      irsend.sendNEC(0xF7C03F, 32); 
    } else {
      Serial.println("Désactiver l'écran");
      // Remplacez 0xF7E01F par le code IR pour désactiver l'écran
      irsend.sendNEC(0xF7E01F, 32); 
    }
  }
}

/*Étapes importantes :
Capture des codes IR :

Utilisez un récepteur IR (comme le module TSOP) pour capturer les signaux de la télécommande de votre TV.
Notez les codes HEX correspondant à "Désactiver l'écran" et "Réactiver l'écran".
Test du prototype :

Connectez tout et vérifiez les mesures de distance via le moniteur série.
Assurez-vous que les commandes IR contrôlent bien la TV.
Intégration :

Placez le capteur à un endroit stratégique devant la TV.
Ajustez les seuils de distance et les délais selon vos besoins.
Avec cette configuration, votre TV pourra détecter la présence humaine et désactiver l’écran automatiquement pour réduire les risques de fatigue visuelle tout en maintenant le son.
*/
